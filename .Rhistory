validation_index_GDP <- createDataPartition(dGDP$X2020, p=0.80, list=FALSE)
# create a list of 80% of the rows in the original dataset we can use for training
validation_index_GDP <- createDataPartition(dGDP$X2020, p=0.80, list=FALSE)
validation_index_CPI <- createDataPartition(dCPI$X2020, p=0.80, list=FALSE)
# select 20% of the data for validation
validation_GDP <- dGDP[-validation_index_GDP,]
validation_CPI <- dCPI[-validation_index_CPI,]
# use the remaining 80% of data to training and testing the models
dGDP <- dGDP[validation_index_GDP,]
dCPI <- dCPI[validation_index_CPI,]
colnames <- c("Country","dGDP","dCPI")
train_data <- as.data.frame(cbind(dGDP$Country.Code,dGDP$X2020,dCPI$X2020))
validate_data <- as.data.frame(cbind(validation_GDP$Country.Code,validation_GDP$X2020,validation_CPI$X2020))
colnames(train_data) <- colnames
colnames(validate_data) <- colnames
plot(train_data$dCPI,train_data$dGDP)
# create a list of 80% of the rows in the original dataset we can use for training
validation_index_GDP <- createDataPartition(dGDP$X2019, p=0.80, list=FALSE)
validation_index_CPI <- createDataPartition(dCPI$X2019, p=0.80, list=FALSE)
# select 20% of the data for validation
validation_GDP <- dGDP[-validation_index_GDP,]
validation_CPI <- dCPI[-validation_index_CPI,]
# use the remaining 80% of data to training and testing the models
dGDP <- dGDP[validation_index_GDP,]
dCPI <- dCPI[validation_index_CPI,]
colnames <- c("Country","dGDP","dCPI")
train_data <- as.data.frame(cbind(dGDP$Country.Code,dGDP$X2019,dCPI$X2019))
validate_data <- as.data.frame(cbind(validation_GDP$Country.Code,validation_GDP$X2019,validation_CPI$X2019))
colnames(train_data) <- colnames
colnames(validate_data) <- colnames
plot(train_data$dCPI,train_data$dGDP)
# create a list of 80% of the rows in the original dataset we can use for training
validation_index_GDP <- createDataPartition(dGDP$X2016, p=0.80, list=FALSE)
validation_index_CPI <- createDataPartition(dCPI$X2016, p=0.80, list=FALSE)
# select 20% of the data for validation
validation_GDP <- dGDP[-validation_index_GDP,]
validation_CPI <- dCPI[-validation_index_CPI,]
# use the remaining 80% of data to training and testing the models
dGDP <- dGDP[validation_index_GDP,]
dCPI <- dCPI[validation_index_CPI,]
colnames <- c("Country","dGDP","dCPI")
train_data <- as.data.frame(cbind(dGDP$Country.Code,dGDP$X2016,dCPI$X2016))
validate_data <- as.data.frame(cbind(validation_GDP$Country.Code,validation_GDP$X2016,validation_CPI$X2016))
colnames(train_data) <- colnames
colnames(validate_data) <- colnames
plot(train_data$dCPI,train_data$dGDP)
# create a list of 80% of the rows in the original dataset we can use for training
validation_index_GDP <- createDataPartition(dGDP$X2015, p=0.80, list=FALSE)
validation_index_CPI <- createDataPartition(dCPI$X2015, p=0.80, list=FALSE)
# select 20% of the data for validation
validation_GDP <- dGDP[-validation_index_GDP,]
validation_CPI <- dCPI[-validation_index_CPI,]
# use the remaining 80% of data to training and testing the models
dGDP <- dGDP[validation_index_GDP,]
dCPI <- dCPI[validation_index_CPI,]
colnames <- c("Country","dGDP","dCPI")
train_data <- as.data.frame(cbind(dGDP$Country.Code,dGDP$X2015,dCPI$X2015))
validate_data <- as.data.frame(cbind(validation_GDP$Country.Code,validation_GDP$X2015,validation_CPI$X2015))
colnames(train_data) <- colnames
colnames(validate_data) <- colnames
plot(train_data$dCPI,train_data$dGDP)
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT")
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT")
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT")
# create a list of 80% of the rows in the original dataset we can use for training
validation_index_GDP <- createDataPartition(dGDP$X2017, p=0.80, list=FALSE)
validation_index_CPI <- createDataPartition(dCPI$X2017, p=0.80, list=FALSE)
# select 20% of the data for validation
validation_GDP <- dGDP[-validation_index_GDP,]
validation_CPI <- dCPI[-validation_index_CPI,]
# use the remaining 80% of data to training and testing the models
dGDP <- dGDP[validation_index_GDP,]
dCPI <- dCPI[validation_index_CPI,]
colnames <- c("Country","dGDP","dCPI")
train_data <- as.data.frame(cbind(dGDP$Country.Code,dGDP$X2017,dCPI$X2017))
validate_data <- as.data.frame(cbind(validation_GDP$Country.Code,validation_GDP$X2017,validation_CPI$X2017))
colnames(train_data) <- colnames
colnames(validate_data) <- colnames
plot(train_data$dCPI,train_data$dGDP)
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
#Fit Linear regression
set.seed(123)
model_lm <- train(dCPI~dGDP, data = train_data,method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# fit
set.seed(123)
model_ridge <- train(dCPI~dGDP, data = train_data,method="foba", trControl=train_control, na.action = na.omit)
# fit
set.seed(123)
model_ridge <- train(dCPI~dGDP, data = train_data,method="foba", trControl=train_control, na.action = na.omit)
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT")
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT")
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT")
# create a list of 80% of the rows in the original dataset we can use for training
validation_index_GDP <- createDataPartition(dGDP$X2017, p=0.80, list=FALSE)
validation_index_CPI <- createDataPartition(dCPI$X2017, p=0.80, list=FALSE)
# select 20% of the data for validation
validation_GDP <- dGDP[-validation_index_GDP,]
validation_CPI <- dCPI[-validation_index_CPI,]
# use the remaining 80% of data to training and testing the models
dGDP <- dGDP[validation_index_GDP,]
dCPI <- dCPI[validation_index_CPI,]
colnames <- c("Country","dGDP","dCPI")
train_data <- as.data.frame(cbind(dGDP$Country.Code,dGDP$X2017,dCPI$X2017))
validate_data <- as.data.frame(cbind(validation_GDP$Country.Code,validation_GDP$X2017,validation_CPI$X2017))
colnames(train_data) <- colnames
colnames(validate_data) <- colnames
plot(train_data$dCPI,train_data$dGDP)
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
#Fit Linear regression
set.seed(123)
model_lm <- train(dCPI~dGDP, data = train_data,method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# fit
set.seed(123)
model_lasso <- train(dCPI~dGDP, data = train_data,method="lasso", trControl=train_control, na.action = na.omit)
library(elasticnet)
model_lasso <- train(dCPI~dGDP, data = train_data,method="lasso", trControl=train_control, na.action = na.omit)
# fit
set.seed(123)
model_lasso <- train(dCPI~dGDP, data = train_data,method="gaussprPoly", trControl=train_control, na.action = na.omit)
model_lasso$results$MAE
model_lasso$results$RMSE^2
summary(model_lasso)
summary(model_lm)
summary(model_lasso)
print(model_lasso)
print(model_lm)
model_lm$results$RMSE^2
model_lasso$results$RMSE^2[3]
model_lasso$results$RMSE^2
model_lasso$results$RMSE^2[[3]]
model_lasso$results$RMSE[[3]]^2
model_lasso$results$RMSE[[3]]
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
library(elasticnet)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT")
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT")
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT")
colnames <- c("Country","dGDP","dCPI")
train_data <- as.data.frame(cbind(dGDP$Country.Code,dGDP$X2017,dCPI$X2017))
colnames(train_data) <- colnames
plot(train_data$dCPI,train_data$dGDP)
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
#Fit Linear regression
set.seed(123)
model_lm <- train(dCPI~dGDP, data = train_data,method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# fit
set.seed(123)
model_lasso <- train(dCPI~dGDP, data = train_data,method="gaussprPoly", trControl=train_control, na.action = na.omit)
print(model_lasso)
model_lasso$results$RMSE[[3]]
model_lasso$results$MAE
set.seed(123)
model_bayesglm <- train(dCPI~dGDP, data = train_data,method="bayesglm", trControl=train_control, na.action = na.omit)
set.seed(123)
model_bayesglm <- train(dCPI~dGDP, data = train_data,method="bayesglm", trControl=train_control, na.action = na.omit)
model_bayesglm$results$MAE
model_bayesglm$results$RMSE[[3]]^2
print(model_bayesglm)
model_bayesglm$results$RMSE^2
View(df)
View(dExport)
reduce(intersect, list(dGDP$ï..Country.Name,dExport$ï..Country.Name))
dGDP$ï..Country.Name
setdiff(levels(dGDP$ï..Country.Name), levels(dExport$ï..Country.Name))
setdiff(levels(levels(dExport$ï..Country.Name,dGDP$ï..Country.Name)))
setdiff(levels(dExport$ï..Country.Name),levels(dGDP$ï..Country.Name))
length(levels(dExport$ï..Country.Name))
View(dExport)
length(levels(dExport$Country.Code))
unique(dExport$Country.Code))
unique(dExport$Country.Code)
length(unique(dExport$Country.Code))
reduce(intersect,list(dExport$Country.Code,dGDP$Country.Code))
reduce(intersect,list(as.character(dExport$Country.Code),as.character(dGDP$Country.Code)))
setdiff(dExport$Country.Code,dGDP$Country.Code)
intersect(dExport$Country.Code,dGDP$Country.Code)
length(intersect(dExport$Country.Code,dGDP$Country.Code))
length(outersect(dExport$Country.Code,dGDP$Country.Code))
dGDP <- dGDP %>% filter(dGDP$Country.Code==intersect(dExport$Country.Code,dGDP$Country.Code))
View(dGDP)
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT")
dGDP <- dGDP %>% filter(Country.Code==intersect(dExport$Country.Code,Country.Code))
dGDP <- dGDP %>% filter(Country.Code==common)
common <- intersect(dExport$Country.Code,dGDP$Country.Code)
dGDP <- dGDP %>% filter(Country.Code==common)
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
library(elasticnet)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT")
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT")
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT")
select()
common <- intersect(dExport$Country.Code,dGDP$Country.Code)
dGDP <- dGDP %>% filter(Country.Code==common)
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
library(elasticnet)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT")
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT")
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT")
common <- intersect(dExport$Country.Code,dGDP$Country.Code)
dGDP <- dGDP %>% select(Country.Code==common)
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT")
common <- intersect(dExport$Country.Code,dGDP$Country.Code)
colnames <- c("Country","dGDP","dCPI")
dGDP <- dGDP %>% group_by(Country.Code) %>% filter(Country.Code==common)
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country.Code"))
View(dGDP)
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country.Code","x2017"))
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country.Code","x2017"))
View(df)
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country.Code","X2017"))
View(dGDP)
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","GDP"="X2017"))
View(dGDP)
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","GDP17"="X2017"))
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT") %>% select(c("Country" = "Country.Code","CPI17"="X2017"))
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","Export17"="X2017"))
train_data <- inner_join(dGDP,dCPI,by = "Country")
View(dGDP)
View(train_data)
train_data <- inner_join(dGDP,dCPI,by = "Country") %>% inner_join(train_data,dExport,by = "Country")
View(train_data)
train_data <- inner_join(dGDP,dCPI,by = "Country"
train_data <- inner_join(dGDP,dCPI,by = "Country")
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","GDP17"="X2017"))
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT") %>% select(c("Country" = "Country.Code","CPI17"="X2017"))
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","Export17"="X2017"))
dGDP$CPI17 <- dCPI$CPI17
View(dGDP)
train_data <- inner_join(dGDP,dExport,by = "Country")
View(train_data)
plot(train_data$CPI17,train_data$Export17)
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
model_lm <- train(CPI17~GDP17+Export17, data = train_data,method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
model_lm <- train(CPI17~GDP17, data = train_data,method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
model_lm <- train(CPI17~GDP17+Export17, data = train_data,method="lasso", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
print(model_lm)
#Fit Linear regression
set.seed(123)
model_lm <- train(CPI17~GDP17+Export17, data = train_data,method="foba", trControl=train_control, na.action = na.omit)
install.packages(foba)
install.packages("foba")
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","GDP"="X2017"))
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT") %>% select(c("Country" = "Country.Code","CPI"="X2017"))
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","Export"="X2017"))
dGDP$CPI <- dCPI$CPI
train_data <- inner_join(dGDP,dExport,by = "Country")
train_control <- trainControl(method="cv", number=10)
#Fit Linear regression
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
print(model_lm)
summary(model_lm)
#Fit Lasso regression
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lasso", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
print(model_lm)
# fit gaussian process with polynomial kernel regression
set.seed(123)
model_gausspoly <- train(CPI~GDP+Export, data = train_data, method="gaussprPoly", trControl=train_control, na.action = na.omit)
model_gausspoly$results$MAE
model_gausspoly$results$RMSE^2
print(model_gausspoly)
# fit bayesian glm
set.seed(123)
model_bayesglm <- train(CPI~dDP+Export, data = train_data, method="bayesglm", trControl=train_control, na.action = na.omit)
model_bayesglm$results$MAE
model_bayesglm$results$RMSE^2
print(model_bayesglm)
# fit bayesian glm
set.seed(123)
model_bayesglm <- train(CPI~GDP+Export, data = train_data, method="bayesglm", trControl=train_control, na.action = na.omit)
model_bayesglm$results$MAE
model_bayesglm$results$RMSE^2
print(model_bayesglm)
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
#Fit Lasso regression
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lasso", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
# fit gaussian process with polynomial kernel regression
set.seed(123)
model_gausspoly <- train(CPI~GDP+Export, data = train_data, method="gaussprPoly", trControl=train_control, na.action = na.omit)
model_gausspoly$results$MAE
model_gausspoly$results$RMSE^2
# print(model_gausspoly)
# fit bayesian glm
set.seed(123)
model_bayesglm <- train(CPI~GDP+Export, data = train_data, method="bayesglm", trControl=train_control, na.action = na.omit)
model_bayesglm$results$MAE
model_bayesglm$results$RMSE^2
# print(model_bayesglm)
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
#Fit Lasso regression
set.seed(123)
model_lasso <- train(CPI~GDP+Export, data = train_data, method="lasso", trControl=train_control, na.action = na.omit)
model_lasso$results$MAE
model_lasso$results$RMSE^2
# print(model_lm)
# fit gaussian process with polynomial kernel regression
set.seed(123)
model_gausspoly <- train(CPI~GDP+Export, data = train_data, method="gaussprPoly", trControl=train_control, na.action = na.omit)
model_gausspoly$results$MAE
model_gausspoly$results$RMSE^2
# print(model_gausspoly)
# fit bayesian glm
set.seed(123)
model_bayesglm <- train(CPI~GDP+Export, data = train_data, method="bayesglm", trControl=train_control, na.action = na.omit)
model_bayesglm$results$MAE
model_bayesglm$results$RMSE^2
# print(model_bayesglm)
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
set.seed(123)
model_bayesglm <- train(CPI~GDP+Export, data = train_data, method="bayesglm", trControl=train_control, na.action = na.omit)
model_bayesglm$results$MAE
model_bayesglm$results$RMSE^2
# print(model_bayesglm)
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
#Fit Lasso regression
set.seed(123)
model_lasso <- train(CPI~GDP+Export, data = train_data, method="lasso", trControl=train_control, na.action = na.omit)
model_lasso$results$MAE
model_lasso$results$RMSE^2
# print(model_lm)
print(model_lm)
print(model_lasso)
model_lasso$results$MAE[[1]]
model_lasso$results$RMSE[[1]]^2
set.seed(123)
model_gausspoly <- train(CPI~GDP+Export, data = train_data, method="gaussprPoly", trControl=train_control, na.action = na.omit)
model_gausspoly$results$MAE
model_gausspoly$results$RMSE^2
# print(model_gausspoly)
print(model_gausspoly)
model_gausspoly$results$MAE[[6]]
model_gausspoly$results$RMSE[[6]]^2
1.705562^2
#Fit Linear regression
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
#Fit Lasso regression
set.seed(123)
model_lasso <- train(CPI~GDP+Export, data = train_data, method="lasso", trControl=train_control, na.action = na.omit)
model_lasso$results$MAE[[1]]
model_lasso$results$RMSE[[1]]^2
# print(model_lasso)
# fit gaussian process with polynomial kernel regression
set.seed(123)
model_gausspoly <- train(CPI~GDP+Export, data = train_data, method="gaussprPoly", trControl=train_control, na.action = na.omit)
model_gausspoly$results$MAE[[6]]
model_gausspoly$results$RMSE[[6]]^2
# print(model_gausspoly)
# fit bayesian glm
set.seed(123)
model_bayesglm <- train(CPI~GDP+Export, data = train_data, method="bayesglm", trControl=train_control, na.action = na.omit)
model_bayesglm$results$MAE
model_bayesglm$results$RMSE^2
# print(model_bayesglm)
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
df = read.csv("./data/economy_asia/economy_asia.csv",header = T, sep =",") %>% as_tibble()
dGDP <- df %>% filter(Indicator.Code=="NGDP_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","GDP"="X2017"))
dCPI <- df %>% filter(Indicator.Code=="PCPI_PC_PP_PT") %>% select(c("Country" = "Country.Code","CPI"="X2017"))
dExport <- df %>% filter(Indicator.Code=="TX_R_PC_PP_PT") %>% select(c("Country" = "Country.Code","Export"="X2017"))
dGDP$CPI <- dCPI$CPI
train_data <- inner_join(dGDP,dExport,by = "Country")
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
#Fit Linear regression
set.seed(123)
model_lm <- train(CPI~GDP+Export, data = train_data, method="lm", trControl=train_control, na.action = na.omit)
model_lm$results$MAE
model_lm$results$RMSE^2
# print(model_lm)
#Fit Lasso regression
set.seed(123)
model_lasso <- train(CPI~GDP+Export, data = train_data, method="lasso", trControl=train_control, na.action = na.omit)
model_lasso$results$MAE[[1]]
model_lasso$results$RMSE[[1]]^2
# print(model_lasso)
# fit gaussian process with polynomial kernel regression
set.seed(123)
model_gausspoly <- train(CPI~GDP+Export, data = train_data, method="gaussprPoly", trControl=train_control, na.action = na.omit)
model_gausspoly$results$MAE[[6]]
model_gausspoly$results$RMSE[[6]]^2
# print(model_gausspoly)
# fit bayesian glm
set.seed(123)
model_bayesglm <- train(CPI~GDP+Export, data = train_data, method="bayesglm", trControl=train_control, na.action = na.omit)
model_bayesglm$results$MAE
model_bayesglm$results$RMSE^2
# print(model_bayesglm)
