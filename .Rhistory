train_size <- nrow(train)
train_size
train_size <- nrow(train) %>% as_numeric
train_size <- nrow(train) %>% as_numeric()
train_size <- nrow(train) %>% as.numeric()
data <- bind_rows(train,test) %>% as_tibble()
data
data %>% View()
data %>% select(-c(Name, Ticket, Embarked))
data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(Sex = as_factor(Sex), Survived = as.logical(Survived))
data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId), Sex = as_factor(Sex), Survived = as.logical(Survived))
data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSP + Parch) %>%
select(-c(SibSp, Parch))
data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch) %>%
select(-c(SibSp, Parch))
df['Deck']=df['Cabin'].map(lambda x: str_match(x, cabin_list))
data$Cabin %>% unique()
gsub('[[:digit:]]+', '', data$Cabin)
gsub('[[:digit:]]', '', data$Cabin)
gsub('[[:digit:]]', '', data$Cabin) %>% unique() %>% sum()
gsub('[[:digit:]]', '', data$Cabin) %>% unique() %>% n()
gsub('[[:digit:]]', '', data$Cabin) %>% unique() %>% count()
gsub('[[:digit:]]', '', data$Cabin) %>% unique()
data$Cabin %>% unique()
gsub('[[:digit:]]', '', data$Cabin) %>% unique()
library(tm) # Remove numbers
install.packages("tm")
library(tm) # Remove numbers
removeNumbers(data$Cabin)
removeNumbers(data$Cabin) %>% head()
data$Cabin %>% head()
data$Cabin
gsub('[[:digit:]]', '', data$Cabin) %>% unique()
"
Prep:
Table of descriptives (mean var range )
Types, obvious correlations,
Feature engineering:
Drop: Name, Ticket, Embarked
Family size (SibSp + Parch)
-> Plot familysize vs survived
Extract deck from cabin, make factor
Impute deck by fare + Pclass + family size
-> Plot deck vs survived
Model:
Split back into train, test
-> 10 fold cross validation
Survived ~ Pclass + Sex + Age + FamSize + Cabin
-> Binary classification problem
-> Use two classification algorithms
-> randomForest
-> ?
"
gsub('[[:digit:]]', '', data$Cabin) %>% substring(,1,1)
x<-gsub('[[:digit:]]', '', data$Cabin) %>%
substring(,1,1)
x<-gsub('[[:digit:]]', '', data$Cabin)
substring(x,1,1)
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1)
}
data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch))
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch))
predictDeck <- function(deck, fare, Pclass, famSize)
data <- data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch))
train <- read_csv('./data/titanic/train.csv')
test  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train) %>% as.numeric()
data <- bind_rows(train,test) %>% as_tibble()
data <- data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch))
summary(data)
countNA <- function(x){sum(is.na(x))}
map(data, countNA)
original <- bind_rows(train,test) %>% as_tibble()
data <- original %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch))
summary(data)
summary(original)
summary(data)
countNA <- function(x){sum(is.na(x))}
map(data, countNA)
data <- original %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
summary(data)
map(data, countNA)
map(data, countNA) %>% as_tibble()
library('stargazer')
summary(data) %>% stargazer()# Descriptive statistics
summary(data) %>% as_tibble()
summary(data)
descriptives <- summary(data)
descriptives
dim(descriptives)
dim(descriptives)[1]
(descriptives)[1]
(descriptives)[[1]]
(descriptives)[[2]]
(descriptives)[1][[]]
(descriptives)[1][]
methods(mice)
temp <- mice(data, m = 1, meth = 'pmm', maxit = 50, seed = 1337)
temp <- mice(data, m = 1, meth = 'pmm', ignore('PassengerId') maxit = 5, seed = 1337)
temp <- mice(data, m = 1, meth = 'pmm', ignore('PassengerId'), maxit = 5, seed = 1337)
temp <- mice(data, m = 1, meth = 'pmm', ignore= 'PassengerId', maxit = 5, seed = 1337)
temp <- mice(data %>% select(-PassengerId), m = 1, meth = 'pmm', ignore = 'PassengerId', maxit = 5, seed = 1337)
temp <- mice(data %>% select(-PassengerId), m = 1, meth = 'pmm', maxit = 5, seed = 1337)
temp <- mice(data %>% select(-PassengerId), m = 1, meth = 'pmm', maxit = 50, seed = 1337)
temp
data_imputed <- complete(temp, 1)
data_imputed
data_imputed <- complete(temp, 1), %>% mutate(PassengerId = data$PassengerId)
data_imputed <- complete(temp, 1) %>% mutate(PassengerId = data$PassengerId)
data_imputed <- complete(temp, 1) %>% mutate(PassengerId = data$PassengerId) %>% select(8,1:7)
data_imputed
data_imputed <- complete(temp, 1) %>% mutate(PassengerId = data$PassengerId) %>% select(8,1:7) %>% as_tibble()
data_imputed
data <- complete(temp, 1) %>%
mutate(PassengerId = data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
# NA Counts
# So: Impute Age, Deck
# class ~ fare correlation?
missingvalues <- map(data, countNA)
# NA Counts
# So: Impute Age, Deck
# class ~ fare correlation?
missingvalues <- map(data, countNA) %>% as_tibble()
missingvalues
original_data <- bind_rows(train,test) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
# NA Counts
# So: Impute Age, Deck
# class ~ fare correlation?
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp <- mice(data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, seed = 1337)
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, seed = 1337)
data <- complete(temp_data, 1) %>%
mutate(PassengerId = data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train) %>% as.numeric()
train_set <- imputed_data %>% filter(1:train_size)
test_set <- imputed_data %>% filter(train_size:nrow(imputed_data))
train_size
train_set <- imputed_data %>% filter(c(1:train_size))
test_set <- imputed_data[train_size:length(imputed_data),]
train_set <- imputed_data[1:train_size,]
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(caret)
library(tm) # Remove numbers
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
library('stargazer')
# Functions #####
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
imputeDeck <- function(deck, fare, Pclass, famSize){
}
imputeAge <- function(){}
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train) %>% as.numeric()
original_data <- bind_rows(train,test) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train) %>% as.numeric()
original_data <- bind_rows(train,test) %>% as_tibble()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
# NA Counts
# So: Impute Age, Deck
# class ~ fare correlation?
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
train_size
train_size <- nrow(train) %>% as.numeric()
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
# NA Counts
# So: Impute Age, Deck
# class ~ fare correlation?
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
train_size
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
set.seed(1337)
names(train_set)
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare) %>%
as_tibble()
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
names(train_set)
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set)
rf_model
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
## 4.3 Variable importance
# Get importance
importance    <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'MeanDecreaseGini'],2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
names(train_set)
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set)
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
plot(rf_model, ylim=c(0,0.36))
## 4.3 Variable importance
# Get importance
importance    <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'MeanDecreaseGini'],2))
prediction <- predict(rf_model, test_set)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solution <- data.frame(PassengerID = test_set$PassengerId, Survived = prediction)
write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
solution
solution <- data.frame(PassengerID = test_set$PassengerId, Survived = prediction) %>% as_tibble()
solution
remove(list = ls())
options(warn=-1)
set.seed(1337)
library(here)
library(tidyverse)
library(lubridate)
library(caret)
library(tm) # Remove numbers
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
library('stargazer')
# Functions #####
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
imputeDeck <- function(deck, fare, Pclass, famSize){
}
imputeAge <- function(){}
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
names(train_set)
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set)
prediction <- predict(rf_model, test_set)
solution <- data.frame(PassengerID = test_set$PassengerId, Survived = prediction) %>% as_tibble()
solution
"
Prep:
X Table of descriptives (mean var range )
X Types, obvious correlations,
Feature engineering:
X Drop: Name, Ticket, Embarked
X Family size (SibSp + Parch)
-> Plot familysize vs survived
X Extract deck from cabin, make factor
X Impute deck by fare + Pclass + family size
-> Plot deck vs survived
Model:
Split back into train, test
-> 10 fold cross validation
Survived ~ Pclass + Sex + Age + FamSize + Cabin
-> Binary classification problem
-> Use two classification algorithms
-> randomForest
-> ?
"
ggpairs(imputed_data)
library(here)
library(tidyverse)
library(lubridate)
library(caret)
library(GGally)
library(tm) # Remove numbers
library('ggplot2') # visualization
library('ggthemes') # visualization
library('mice') # imputation
library('randomForest') # classification algorithm
# Functions #####
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
imputeDeck <- function(deck, fare, Pclass, famSize){
}
imputeAge <- function(){}
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
ggpairs(imputed_data)
ggpairs(imputed_data %>% select(-PassengerId))
desc_table <- summary(imputed_data)
desc_plot <- ggpairs(imputed_data %>% select(-PassengerId))
(desc_table <- summary(imputed_data))
(desc_plot <- ggpairs(imputed_data %>% select(-PassengerId)))
