select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train) %>% as.numeric()
original_data <- bind_rows(train,test) %>% as_tibble()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
# NA Counts
# So: Impute Age, Deck
# class ~ fare correlation?
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
train_size
train_size <- nrow(train) %>% as.numeric()
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
# NA Counts
# So: Impute Age, Deck
# class ~ fare correlation?
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
as_tibble()
train_size
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
set.seed(1337)
names(train_set)
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
imputed_data <- complete(temp_data, 1) %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare) %>%
as_tibble()
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
names(train_set)
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set)
rf_model
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
## 4.3 Variable importance
# Get importance
importance    <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'MeanDecreaseGini'],2))
rankImportance <- varImportance %>%
mutate(Rank = paste0('#',dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance),
y = Importance, fill = Importance)) +
geom_bar(stat='identity') +
geom_text(aes(x = Variables, y = 0.5, label = Rank),
hjust=0, vjust=0.55, size = 4, colour = 'red') +
labs(x = 'Variables') +
coord_flip() +
theme_few()
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
names(train_set)
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set)
plot(rf_model, ylim=c(0,0.36))
legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
plot(rf_model, ylim=c(0,0.36))
## 4.3 Variable importance
# Get importance
importance    <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance),
Importance = round(importance[ ,'MeanDecreaseGini'],2))
prediction <- predict(rf_model, test_set)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
solution <- data.frame(PassengerID = test_set$PassengerId, Survived = prediction)
write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
solution
solution <- data.frame(PassengerID = test_set$PassengerId, Survived = prediction) %>% as_tibble()
solution
remove(list = ls())
options(warn=-1)
set.seed(1337)
library(here)
library(tidyverse)
library(lubridate)
library(caret)
library(tm) # Remove numbers
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('dplyr') # data manipulation
library('mice') # imputation
library('randomForest') # classification algorithm
library('stargazer')
# Functions #####
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
imputeDeck <- function(deck, fare, Pclass, famSize){
}
imputeAge <- function(){}
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
names(train_set)
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set)
prediction <- predict(rf_model, test_set)
solution <- data.frame(PassengerID = test_set$PassengerId, Survived = prediction) %>% as_tibble()
solution
"
Prep:
X Table of descriptives (mean var range )
X Types, obvious correlations,
Feature engineering:
X Drop: Name, Ticket, Embarked
X Family size (SibSp + Parch)
-> Plot familysize vs survived
X Extract deck from cabin, make factor
X Impute deck by fare + Pclass + family size
-> Plot deck vs survived
Model:
Split back into train, test
-> 10 fold cross validation
Survived ~ Pclass + Sex + Age + FamSize + Cabin
-> Binary classification problem
-> Use two classification algorithms
-> randomForest
-> ?
"
ggpairs(imputed_data)
library(here)
library(tidyverse)
library(lubridate)
library(caret)
library(GGally)
library(tm) # Remove numbers
library('ggplot2') # visualization
library('ggthemes') # visualization
library('mice') # imputation
library('randomForest') # classification algorithm
# Functions #####
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
imputeDeck <- function(deck, fare, Pclass, famSize){
}
imputeAge <- function(){}
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
ggpairs(imputed_data)
ggpairs(imputed_data %>% select(-PassengerId))
desc_table <- summary(imputed_data)
desc_plot <- ggpairs(imputed_data %>% select(-PassengerId))
(desc_table <- summary(imputed_data))
(desc_plot <- ggpairs(imputed_data %>% select(-PassengerId)))
remove(list = ls())
options(warn=-1)
set.seed(1337)
library(here)
library(tidyverse)
library(lubridate)
library(caret)
library(GGally)
library(tm) # Remove numbers
library('ggplot2') # visualization
library('ggthemes') # visualization
library('mice') # imputation
library('randomForest') # classification algorithm
# Functions #####
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
imputeDeck <- function(deck, fare, Pclass, famSize){
}
imputeAge <- function(){}
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
View(original_data)
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
(desc_table <- summary(imputed_data))
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
(desc_table <- summary(imputed_data))
missingvalues <- map(imputed, countNA) %>% as_tibble()
missingvalues <- map(imputed_data, countNA) %>% as_tibble()
missingvalues
(desc_plot <- ggpairs(imputed_data %>% select(-PassengerId)))
(desc_table <- summary(imputed_data))
desc_table
(desc_plot <- ggpairs(imputed_data %>% select(-c(PassengerId, Sex, Age))))
(desc_plot <- ggpairs(imputed_data %>% select(-c(PassengerId, Sex, Age, Deck))))
(desc_plot <- ggpairs(imputed_data %>% select(-c(PassengerId))))
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set)
prediction <- predict(rf_model, test_set)
solution <- data.frame(PassengerID = test_set$PassengerId, Survived = prediction) %>% as_tibble()
solution
sms <- read_delim("data/sms/SmsCollection.csv",
";", escape_double = FALSE, trim_ws = TRUE)
table(sms$label)
names(sms)
sms
sms %>% head()
sms <- read_delim("data/sms/SmsCollection.csv",
";", escape_double = FALSE, trim_ws = TRUE) %>% as_tibble()
table(sms$label)
names(sms)
sms %>% head()
#separating Train and test data
sms_train<-sms[1:4458,]
sms_test<-sms[4458:nrow(sms),]
msg.dfm <- dfm(msg.corpus, tolower = TRUE)  #generating document freq matrix
remove(list = ls())
options(warn=-1)
set.seed(1337)
library(here)
library(tidyverse)
library(lubridate)
library(caret)
library(GGally)
library(tm) # Remove numbers
library('ggplot2') # visualization
library('ggthemes') # visualization
library('mice') # imputation
library('randomForest') # classification algorithm
# Functions #####
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
imputeDeck <- function(deck, fare, Pclass, famSize){
}
imputeAge <- function(){}
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.logical(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
desc_table
(desc_table <- summary(imputed_data))
(desc_plot <- ggpairs(imputed_data %>% select(-c(PassengerId))))
# randomForest without crossvalidation
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
train_control <- trainControl(method="cv", number=10)
model_rf <- train(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set,  method="rf", metric = metric,
trControl=train_control,na.action = na.omit)
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.factor(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
(desc_table <- summary(imputed_data))
(desc_plot <- ggpairs(imputed_data %>% select(-c(PassengerId))))
# randomForest without crossvalidation
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
train_control <- trainControl(method="cv", number=10)
model_rf <- train(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set,  method="rf", metric = metric,
trControl=train_control,na.action = na.omit)
model_svm <- train(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set,  method="svmRadial",metric = metric,
trControl=train_control, na.action = na.omit)
model_rf <- train(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set,  method="rf", metric = "Accuracy",
trControl=train_control,na.action = na.omit)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
remove(list = ls())
library(caret, dependencies = TRUE)
remove(list = ls())
options(warn=-1)
set.seed(1337)
remove(list = ls())
options(warn=-1)
set.seed(1337)
library(here)
library(tidyverse)
library(lubridate)
library(caret)
library(GGally)
library(tm) # Remove numbers
library('ggplot2') # visualization
library('ggthemes') # visualization
library('mice') # imputation
library('randomForest') # classification algorithm
# Functions #####
cabinToDeck <- function(cabin){
deck <- gsub('[[:digit:]]', '', cabin)
deck <- substring(deck,1,1) %>% as_factor()
return(deck)
}
countNA <- function(x){sum(is.na(x))}
train_set <- read_csv('./data/titanic/train.csv')
test_set  <- read_csv('./data/titanic/train.csv')
train_size <- nrow(train_set) %>% as.numeric()
original_data <- bind_rows(train_set,test_set) %>% as_tibble()
cleaned_data <- original_data %>%
select(-c(Name, Ticket, Embarked)) %>%
mutate(PassengerId = as.factor(PassengerId),
Sex = as_factor(Sex),
Survived = as.factor(Survived),
FamSize = SibSp + Parch,
Deck = cabinToDeck(Cabin)) %>%
select(-c(SibSp, Parch, Cabin))
descriptives <- summary(cleaned_data)
descriptives
missingvalues <- map(cleaned_data, countNA) %>% as_tibble()
missingvalues
temp_data <- mice(cleaned_data %>% select(-PassengerId),
m = 1, meth = 'pmm', maxit = 50, print=FALSE, seed = 1337)
imputed_data <- complete(temp_data, 1) %>%
as_tibble() %>%
mutate(PassengerId = cleaned_data$PassengerId) %>%
select(8,1:7) %>%
select(-Fare)
(desc_table <- summary(imputed_data))
(desc_plot <- ggpairs(imputed_data %>% select(-c(PassengerId))))
# randomForest without crossvalidation
train_set <- imputed_data[1:train_size,]
test_set <- imputed_data[train_size:length(imputed_data),]
train_control <- trainControl(method="cv", number=10)
model_rf <- train(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set,  method="rf", metric = "Accuracy",
trControl=train_control,na.action = na.omit)
model_svm <- train(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set,  method="svmRadial",metric = "Accuracy",
trControl=train_control, na.action = na.omit)
install.packages("e1071")
library("e1071")
model_rf <- train(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set,  method="rf", metric = "Accuracy",
trControl=train_control,na.action = na.omit)
model_svm <- train(Survived ~ Pclass + Sex + Age + FamSize + Deck,
data = train_set,  method="svmRadial",metric = "Accuracy",
trControl=train_control, na.action = na.omit)
results <- resamples(list(rf = model_rf, svm = model_svm))
summary(results)
dotplot(results)
predictions <- predict(model_svm, test_set)
confusionMatrix(predictions, test_set$Survived)
