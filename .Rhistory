library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
#raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
raw = read_csv("~/Studie/VU/MSc/Data_Mining_Techniques/Data-Mining-Techniques/data/ODI/ODI-2021.csv", col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
ODI %>% head()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
ODI$Programme
str_detect(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
Programme_cluster =
ifelse(str_detect(ODI$Programme,regex("AI|artificial", ignore_case = TRUE)), "AI",
ifelse(str_detect(ODI$Programme,regex("CS|Computer|Computational", ignore_case = TRUE)), "CS",
ifelse(str_detect(ODI$Programme,regex("Bio", ignore_case = TRUE)), "BIO",
ifelse(str_detect(ODI$Programme,regex("Finance|Duisenberg|QRM|Risk", ignore_case = TRUE)), "FIN",
ifelse(str_detect(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)), "ECO",
ifelse(str_detect(ODI$Programme,regex("BA|Business", ignore_case = TRUE)), "BUS",
"Other"))))))
ODI <- ODI %>%
mutate(
Programme = Programme_cluster,
Date = mdy(Date),
Time = hms(Time))
#####Plotting#####
##Stacked plot's data
df = ODI[,3:7]
colnames(df) <- c("Programme","ML", "IR","St","DB")
#Wide to long for plotting
meltd <- melt(df, id.vars ="Programme",na.rm = T)
#Order the column's value for stacked plot
d <- with(meltd, meltd[order(Programme, variable, value),])
#standardise binary value
d$value = factor(d$value, levels = c("1","0","mu","sigma","ja","nee"), labels = c(1,0,1,0,1,0))
#create a column with value of 1 for the y axis
d$count = rep(1)
#plot
ggplot(data=d, aes(x=variable, y=count, fill=value)) +
geom_bar(stat="identity") +
facet_grid(~Programme) +
labs(title="Student Academic Background Info", x="Course", y="Count", fill="Participation") +
theme(plot.title = element_text(size=25, margin=margin(t=20, b=20)))
sum(d$Programme =="ECO")
ODI$Programme
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
ODI %>% head()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
ODI$Programme
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
#raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
raw = read_csv("~/Studie/VU/MSc/Data_Mining_Techniques/Data-Mining-Techniques/data/ODI/ODI-2021.csv", col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
ODI %>% head()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
ODI$Programme
Programme_cluster <- ODI$Programme %>%
str_replace(regex("AI|artificial", ignore_case = TRUE), "AI") %>%
str_replace(regex("CS|Computer|Computational", ignore_case = TRUE), "CS") %>%
str_replace(regex("Bio", ignore_case = TRUE), "BIO") %>%
str_replace(regex("Finance|Duisenberg|QRM|Risk", ignore_case = TRUE), "FIN") %>%
str_replace(regex("Econometrics|EDS|EOR", ignore_case = TRUE), "ECO") %>%
str_replace(regex("BA|Business", ignore_case = TRUE), "BUS")
Programme_cluster
Programme_cluster =
ifelse(str_detect(ODI$Programme,regex("AI|artificial", ignore_case = TRUE)), "AI",
ifelse(str_detect(ODI$Programme,regex("CS|Computer|Computational", ignore_case = TRUE)), "CS",
ifelse(str_detect(ODI$Programme,regex("Bio", ignore_case = TRUE)), "BIO",
ifelse(str_detect(ODI$Programme,regex("Finance|Duisenberg|QRM|Risk", ignore_case = TRUE)), "FIN",
ifelse(str_detect(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)), "ECO",
ifelse(str_detect(ODI$Programme,regex("BA|Business", ignore_case = TRUE)), "BUS",
"Other"))))))
Programme_cluster
str_view(regex("AI|artificial", ignore_case = TRUE))
str_view(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
str_view(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))
str_count(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
str_sum(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
str_count(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
str_count(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))
Programme_cluster
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
#raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
raw = read_csv("~/Studie/VU/MSc/Data_Mining_Techniques/Data-Mining-Techniques/data/ODI/ODI-2021.csv", col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
ODI %>% head()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
ODI$Programme
Programme_cluster <- rep(313,1)
Programme_cluster
Programme_cluster <- rep(0,313)
Programme_cluster
if (str_detect(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))){
Programme_cluster = "AI"
} else if (str_detect(ODI$Programme,regex("CS|Computer|Computational", ignore_case = TRUE))){
Programme_cluster = "CS"
} else if (str_detect(ODI$Programme,regex("Bio", ignore_case = TRUE))){
Programme_cluster = "BIO"
} else if (str_detect(ODI$Programme,regex("Finance|Duisenberg|QRM|Risk", ignore_case = TRUE))){
Programme_cluster = "FIN"
} else if (str_detect(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))){
Programme_cluster = "ECO"
} else if (str_detect(ODI$Programme,regex("BA|Business", ignore_case = TRUE))){
Programme_cluster = "BUS"
} else {Programme_cluster = "Other"}
Programme_cluster <- rep(0,313)
for (i in (1:313)){
if (str_detect(ODI$Programme[i],regex("AI|artificial", ignore_case = TRUE))){
Programme_cluster[i] = "AI"
} else if (str_detect(ODI$Programme[i],regex("CS|Computer|Computational", ignore_case = TRUE))){
Programme_cluster[i] = "CS"
} else if (str_detect(ODI$Programme[i],regex("Bio", ignore_case = TRUE))){
Programme_cluster[i] = "BIO"
} else if (str_detect(ODI$Programme[i],regex("Finance|Duisenberg|QRM|Risk", ignore_case = TRUE))){
Programme_cluster[i] = "FIN"
} else if (str_detect(ODI$Programme[i],regex("Econometrics|EDS|EOR", ignore_case = TRUE))){
Programme_cluster[i] = "ECO"
} else if (str_detect(ODI$Programme[i],regex("BA|Business", ignore_case = TRUE))){
Programme_cluster[i] = "BUS"
} else {Programme_cluster[i] = "Other"}
}
count(Programme_cluster["ECO"])
count(Programme_cluster=="ECO")
Programme_cluster
Programme_cluster <- rep(0,313)
for (i in (1:313)){
if (str_detect(ODI$Programme[i],regex("AI|artificial", ignore_case = TRUE))){
Programme_cluster[i] = "AI"
} else if (str_detect(ODI$Programme[i],regex("CS|Computer|Computational", ignore_case = TRUE))){
Programme_cluster[i] = "CS"
} else if (str_detect(ODI$Programme[i],regex("Bio", ignore_case = TRUE))){
Programme_cluster[i] = "BIO"
} else if (str_detect(ODI$Programme[i],regex("Finance|Duisenberg|QRM|Risk", ignore_case = TRUE))){
Programme_cluster[i] = "FIN"
} else if (str_detect(ODI$Programme[i],regex("Econometrics|EDS|EOR", ignore_case = TRUE))){
Programme_cluster[i] = "ECO"
} else if (str_detect(ODI$Programme[i],regex("BA|Business", ignore_case = TRUE))){
Programme_cluster[i] = "BUS"
}
}
Programme_cluster
ODI$Programme
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
#raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
raw = read_csv("~/Studie/VU/MSc/Data_Mining_Techniques/Data-Mining-Techniques/data/ODI/ODI-2021.csv", col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
ODI %>% head()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
ODI$Programme
str_locate(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
str_subset(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))
count(str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)))
length(str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)))
str_replace_all(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
str_replace_all(ODI$Programme,regex("AI|artificial", ignore_case = TRUE), "AI")
replace(str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)), values = "ECO")
str_subset(ODI$Programme,regex("AI|artificial", ignore_case = TRUE))
length(str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)))
replace(str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)), values = "ECO")
length(replace(str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)), values = "ECO"))
ODI$Programme <- ODI$Programme %>%
replace(str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE)), values = "ECO")
str_subset(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))
str_match(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))
str_which(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))
str_locate(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))
str_count(ODI$Programme,regex("Econometrics|EDS|EOR", ignore_case = TRUE))
ODI$Programme[grepl("Econometrics|EDS|EOR"), ODI$Programme, ignore.case=TRUE] <- "ECO"
ODI$Programme[grepl("Econometrics|EDS|EOR", ODI$Programme, ignore.case=TRUE)] <- "ECO"
ODI$Programme
count(ODI$Programme=="ECO")
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
#raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
raw = read_csv("~/Studie/VU/MSc/Data_Mining_Techniques/Data-Mining-Techniques/data/ODI/ODI-2021.csv", col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
ODI %>% head()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
ODI$Programme[grepl("AI|artificial", ODI$Programme, ignore.case=TRUE)] <- "AI"
ODI$Programme[grepl("CS|Computer|Computational", ODI$Programme, ignore.case=TRUE)] <- "CS"
ODI$Programme[grepl("Bio", ODI$Programme, ignore.case=TRUE)] <- "BIO"
ODI$Programme[grepl("Finance|Duisenberg|QRM|Risk", ODI$Programme, ignore.case=TRUE)] <- "FIN"
ODI$Programme[grepl("Econometrics|EDS|EOR", ODI$Programme, ignore.case=TRUE)] <- "ECO"
ODI$Programme[grepl("BA|Business", ODI$Programme, ignore.case=TRUE)] <- "BUS"
ODI$Programme
ODI$Programme=="ECO"
count(ODI$Programme=="ECO")
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
ODI %>% head()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
ODI$Programme[grepl("AI|artificial", ODI$Programme, ignore.case=TRUE)] <- "AI"
ODI$Programme[grepl("\\bCS\\b|Computer|Computational", ODI$Programme, ignore.case=TRUE)] <- "CS"
ODI$Programme[grepl("Bio", ODI$Programme, ignore.case=TRUE)] <- "BIO"
ODI$Programme[grepl("Finance|Duisenberg|QRM|Risk", ODI$Programme, ignore.case=TRUE)] <- "FIN"
ODI$Programme[grepl("Econometrics|EDS|EOR", ODI$Programme, ignore.case=TRUE)] <- "ECO"
ODI$Programme[grepl("BA|Business", ODI$Programme, ignore.case=TRUE)] <- "BUS"
count(ODI$Programme=="ECO")
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape2)
library(plyr)
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
#raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
raw = read_csv("/Users/vyly/Desktop/VU_Master/DataMining/Data-Mining-Techniques/data/ODI/ODI-2021.csv", col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(reshape2)
library(plyr)
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
#raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
raw = read_csv("~/Studie/VU/MSc/Data_Mining_Techniques/Data-Mining-Techniques/data/ODI/ODI-2021.csv", col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
colnames(ODI)
dim(ODI)
ODI %>% head()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
Programme_cluster =
ifelse(grepl("\\bAI\\b|artificial", ODI$Programme, ignore.case=T), "AI",
ifelse(grepl("\\bCS\\b|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
ifelse(grepl("Bio", ODI$Programme, ignore.case=T), "BIO",
ifelse(grepl("Finance|Duisenberg|QRM", ODI$Programme, ignore.case=T), "FIN",
ifelse(grepl("Econometrics|EDS|EOR", ODI$Programme, ignore.case=T), "ECO",
ifelse(grepl("\\bBA\\b|Business", ODI$Programme, ignore.case=T), "BUS",
"Other"))))))
ODI <- ODI %>%
mutate(
Programme = Programme_cluster,
Date = mdy(Date),
Time = hms(Time))
#####Plotting#####
##Stacked plot's data
df = ODI[,3:7]
colnames(df) <- c("Programme","ML", "IR","St","DB")
#Wide to long for plotting
meltd <- melt(df, id.vars ="Programme",na.rm = T)
#Order the column's value for stacked plot
d <- with(meltd, meltd[order(Programme, variable, value),])
#standardise binary value
d$value = factor(d$value, levels = c("1","0","mu","sigma","ja","nee"), labels = c(1,0,1,0,1,0))
#create a column with value of 1 for the y axis
d$count = rep(1)
#plot
ggplot(data=d, aes(x=variable, y=count, fill=value)) +
geom_bar(stat="identity") +
facet_grid(~Programme) +
labs(title="Student Academic Background Info", x="Course", y="Count", fill="Participation") +
theme(plot.title = element_text(size=25, margin=margin(t=20, b=20)))
sum(d$Programme =="ECO")
sum(df$Programme =="ECO")
sum(df$Programme =="AI")
sum(df$Programme =="CS")
sum(df$Programme =="BIO")
sum(df$Programme =="FIN")
sum(df$Programme =="ECO")
sum(df$Programme =="BUS")
sum(df$Programme =="Other")
remove(list = ls())
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(caret)
ODI = read.csv("./data/ODI/ODI-2021_clean.csv",header = T, sep =";") %>% as_tibble()
ODI <- ODI %>% dplyr::mutate(
MLCourse=as.factor(MLCourse),
IRCourse=as.factor(IRCourse),
StatCourse=as.factor(StatCourse),
DBCourse=as.factor(DBCourse),
Gender=as.factor(Gender),
Chocolate=as.factor(Chocolate),
Reward=as.numeric(Reward),
RandomNo=as.numeric(RandomNo),
Bedtime= factor(ODI$Bedtime, levels =c("19","20","21","22","23","0","1","2","3","4","5"),  ordered = F)
)
setwd("~/Studie/VU/MSc/Data_Mining_Techniques/Data-Mining-Techniques")
ODI = read.csv("./data/ODI/ODI-2021_clean.csv",header = T, sep =";") %>% as_tibble()
ODI <- ODI %>% dplyr::mutate(
MLCourse=as.factor(MLCourse),
IRCourse=as.factor(IRCourse),
StatCourse=as.factor(StatCourse),
DBCourse=as.factor(DBCourse),
Gender=as.factor(Gender),
Chocolate=as.factor(Chocolate),
Reward=as.numeric(Reward),
RandomNo=as.numeric(RandomNo),
Bedtime= factor(ODI$Bedtime, levels =c("19","20","21","22","23","0","1","2","3","4","5"),  ordered = F)
)
# Define comparison metric
metric <- "Accuracy"
# Define train control for k fold cross validation
train_control <- trainControl(method="cv", number=10)
set.seed(123)
model_nb <- train(Gender~Reward, data=ODI, trControl=train_control, method="nb", na.action = na.omit)
# Fit KNN
set.seed(123)
model_knn <- train(Gender~Reward, data=ODI, trControl=train_control, method="knn", na.action = na.omit)
results <- resamples(list(nb=model_nb,knn=model_knn))
summary(results)
train_control <- trainControl(method="cv", number=10)
# Fit Naive Bayes Model
set.seed(123)
model_nb <- train(Gender~finalgd+Reward, data=ODI, trControl=train_control, method="nb", na.action = na.omit)
# Fit KNN
set.seed(123)
model_knn <- train(Gender~finalgd+Reward, data=ODI, trControl=train_control, method="knn", na.action = na.omit)
train_control <- trainControl(method="cv", number=10)
# Fit Naive Bayes Model
set.seed(123)
model_nb <- train(Gender~Chocolate+Reward, data=ODI, trControl=train_control, method="nb", na.action = na.omit)
# Fit KNN
set.seed(123)
model_knn <- train(Gender~Chocolate+Reward, data=ODI, trControl=train_control, method="knn", na.action = na.omit)
train_control <- trainControl(method="cv", number=10)
# Fit Naive Bayes Model
set.seed(123)
model_nb <- train(Gender~Chocolate+Reward+gd1+gd2, data=ODI, trControl=train_control, method="nb", na.action = na.omit)
# Fit KNN
set.seed(123)
model_knn <- train(Gender~Chocolate+Reward+gd1+gd2, data=ODI, trControl=train_control, method="knn", na.action = na.omit)
train_control <- trainControl(method="cv", number=10)
# Fit Naive Bayes Model
set.seed(123)
model_nb <- train(Gender~Chocolate+Reward+StatCourse, data=ODI, trControl=train_control, method="nb", na.action = na.omit)
# Fit KNN
set.seed(123)
model_knn <- train(Gender~Chocolate+Reward+StatCourse, data=ODI, trControl=train_control, method="knn", na.action = na.omit)
