Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.numeric(Neighbours), "NaN")
)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.numeric(Neighbours), "NaN")
)
ODI
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN")
)
ODI$Neighbours %>% unique()
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN")
)
ODI$Neighbours %>% unique()
ODI
ODI[,'Neighbours']
ODI[,'Neighbours'][Neighbours > 10] = NA
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA
ODI$Neighbours %>% unique()
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN") # Drop non numeric
) %>%
select(-c('Standup'))
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
colnames(ODI)
dim(ODI)
ODI %>% head()
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN") # Drop non numeric
) %>%
select(-c('Standup'))
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI %>% head()
ODI %>% select(Stresslevel)
ODI %>% select(Stresslevel) %>% range()
ODI %>% select(Stresslevel) %>% unique
ODI %>% select(Stresslevel) %>% unique()
"
Data preprocessing
Data Mining Techniques
Assignment 1
Task 1 A
"
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
colnames(ODI)
dim(ODI)
ODI %>% head()
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN") # Drop non numeric
) %>%
select(-c('Standup')) # Drop standup
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI %>% select(Stresslevel) %>% unique()
# Birthdate
# Standup
# Stresslevel
# Reward
# RandomNo
# Bedtime
# Gday1/2
ODI %>% select(Stresslevel) %>% unique() %>% print()
ODI %>% select(Stresslevel) %>% unique() %>% head(62)
ODI %>% select(Stresslevel) %>% unique() %>% View()
ODI[, 'Stesslevel'][ODI[, 'Stesslevel'] > 100 | ODI[, 'Stesslevel'] < 0] = NA
ODI[, 'Stresslevel'][ODI[, 'Stesslevel'] > 100 | ODI[, 'Stesslevel'] < 0] = NA
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100 | ODI[, 'Stresslevel'] < 0] = NA
ODI %>% select(Stresslevel) %>% unique() %>% View()
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN") # Drop non numeric
) %>%
select(-c('Standup')) # Drop standup
ODI %>% select(Stresslevel) %>% unique() %>% View()
ODI %>% select(Stresslevel) %>% as.numeric() %>% unique() %>% View()
ODI %>% select(Stresslevel) %>% %>% unique() %>% View()
ODI %>% select(Stresslevel) %>% unique() %>% View()
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100 || ODI[, 'Stresslevel'] < 0] = NA
ODI %>% select(Stresslevel) %>% unique() %>% View()
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100 OR ODI[, 'Stresslevel'] < 0] = NA
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100 | ODI[, 'Stresslevel'] < 0] = NA
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100 | ODI[, 'Stresslevel'] < 0]
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100 | ODI[, 'Stresslevel'] < 0] = 1
ODI %>% select(Stresslevel) %>% unique() %>% View()
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100]= 1
ODI %>% select(Stresslevel) %>% unique() %>% View()
ODI[, 'Stresslevel']
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN") # Drop non numeric
) %>%
select(-c('Standup')) # Drop standup
ODI[, 'Stresslevel']
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100] = TRUE
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100] = 1
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100] = a
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100] = "a"
ODI[, 'Stresslevel']
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN") # Drop non numeric
) %>%
select(-c('Standup')) # Drop standup
ODI %>% select(Stresslevel) %>% unique() %>% View()
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100] =
stress = ODI[, 'Stresslevel']
ODI[, 'Stresslevel'][ODI[, 'Stresslevel'] > 100] =
stress = ODI[, 'Stresslevel']
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN") # Drop non numeric
) %>%
select(-c('Standup')) # Drop standup
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
stress = ODI[, 'Stresslevel']
stress
grepl("over", stress)
grepl("over", stress, fixed = TRUE)
stress %>% contains("over")
stress[1] %>% contains("over")
filter(stress, !grepl("over"))
filter(ODI, !grepl("over"), stress)
filter(ODI, !grepl('over'), stress)
filter(ODI, !grepl('over', stress))
filter(ODI, grepl('over', stress))
filter(ODI, !grepl('over', stress))
ODI %>%
filter(str_detect(stress, 'over'))
ODI %>%
filter(str_detect(Stresslevel, 'over'))
stress = ODI[, 'Stresslevel']
stress
stress %>% unique() %>% view()
ODI %>%
filter(str_detect(Stresslevel, 'over' | 'Over'))
ODI %>%
filter(str_detect(Stresslevel, ignore.case'over'))
ODI %>%
filter(str_detect(Stresslevel, ignore.case('over')))
ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T)))
ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T))) %>%
mutate(Stresslevel = NA)
ODI[, 'Stresslevel'][str_detect(Stresslevel, regex('over', ignore_case = T))]
ODI[, 'Stresslevel'][str_detect(ODI[, 'Stresslevel'], regex('over', ignore_case = T))] = NA
stress %>% unique() %>% view()
ODI[, 'Stresslevel'][str_detect(ODI[, 'Stresslevel'], regex('over', ignore_case = T))] = NA
a = ODI[, 'Stresslevel'][str_detect(ODI[, 'Stresslevel'], regex('over', ignore_case = T))] = NA
a
a = ODI[, 'Stresslevel'][str_detect(ODI[, 'Stresslevel'], regex('over', ignore_case = T))]
a
a = ODI[, 'Stresslevel'][str_detect(ODI[, 'Stresslevel'], regex('over', ignore_case = T))]
ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T))) %>%
mutate(Stresslevel = NA)
ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T))) %>%
mutate(Stresslevel = NA)
ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T))) %>%
mutate(Stresslevel = NA)
ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T)))
a<- ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T)))
a
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN") # Drop non numeric
) %>%
select(-c('Standup')) # Drop standup
a<- ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T)))
a# Birthdate
a<- ODI %>%
filter(str_detect(Stresslevel, regex('over', ignore_case = T))) %>%
mutate(Stresslevel = NA)
Stresslevel = ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), Stresslevel, NA )
a <- ODI %>%
mutate(
Stresslevel = ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), Stresslevel, NA )
)
a
a <- ODI %>%
mutate(
Stresslevel = ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)
)
a
a %>% unique()
a %>% select(Stresslevel) %>% unique() %>% View()
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel))
) %>%
select(-c('Standup')) # Drop standup
ODI %>% select(Stresslevel) %>% range()
ODI %>% select(Stresslevel)
ODI %>% select(Stresslevel) %>% range
ODI %>% select(Stresslevel) %>% min()
ODI %>% select(Stresslevel) %>% View()
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA
ODI %>% select(Stresslevel) %>% View()
ODI %>% View
dim(ODI)
colnames(ODI)
ODI[,'Programme']
ODI %>% select(Programme)
ODI %>% select(Programme) %>%
ODI$Programme <- ifelse(
grepl("AI", ODI$Programme, ignore.case=T), "AI",
"Other"
)
ODI$Programme <- ifelse(
grepl("AI", ODI$Programme, ignore.case=T), "AI",
"Other"
)
ODI$Programme
ODI$Programme <- ifelse(
grepl("AI | Artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
ODI$Programme
ODI$Programme <- ifelse(
grepl("AI|Artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
ODI$Programme
ODI$Programme <- ifelse(
grepl("AI"|"Artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
ODI$Programme <- ifelse(
grepl("AI | artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
ODI$Programme
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
ODI %>% select(Stresslevel) %>% View()
cluster <- ifelse(
grepl("AI | artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
cluster
cluster %>% count("AI")
cluster %>% select("AI")
cluster %>% filter("AI")
cluster # Birthdate
ODI %>% select(Programme)
cluster <- ifelse(
grepl("AI", ODI$Programme, ignore.case=T), "AI",
"Other"
)
cluster
cluster %>% sum("AI")
count(cluster)
cluster <- ifelse(
grepl("AI | artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
cluster
cluster <- ifelse(
grepl("AI" | "artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
cluster <- ifelse(
grepl("AI | artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
cluster <- ifelse(
grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
cluster
cluster <- ifelse(
grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
grepl("CS|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
grepl("Bio", ODI$Programme, ignore.case=T), "BIO",
grepl("Finance|Duisenberg", ODI$Programme, ignore.case=T), "FIN",
grepl("Econometrics|EDS", ODI$Programme, ignore.case=T), "ECO",
grepl("BA|Business", ODI$Programme, ignore.case=T), "BUSINESS",
"Other"
)
cluster <- ifelse(
grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
grepl("CS|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
grepl("Bio", ODI$Programme, ignore.case=T), "BIO",
grepl("Finance|Duisenberg", ODI$Programme, ignore.case=T), "FIN",
grepl("Econometrics|EDS", ODI$Programme, ignore.case=T), "ECO",
grepl("BA|Business", ODI$Programme, ignore.case=T), "BUSINESS",
"Other"
)
cluster <- ifelse(
grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
"Other"
)
cluster
cluster <- ifelse(
grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
grepl("CS|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
grepl("Bio", ODI$Programme, ignore.case=T), "BIO",
grepl("Finance|Duisenberg", ODI$Programme, ignore.case=T), "FIN",
grepl("Econometrics|EDS", ODI$Programme, ignore.case=T), "ECO",
grepl("BA|Business", ODI$Programme, ignore.case=T), "BUSINESS",
"Other"
)
cluster <- ifelse(
grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
grepl("CS|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
"Other"
)
cluster <-
ifelse(grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
ifelse(grepl("CS|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
ifelse(grepl("Bio", ODI$Programme, ignore.case=T), "BIO",
ifelse(grepl("Finance|Duisenberg", ODI$Programme, ignore.case=T), "FIN",
ifelse( grepl("Econometrics|EDS", ODI$Programme, ignore.case=T), "ECO",
ifelse(grepl("BA|Business", ODI$Programme, ignore.case=T), "BUSINESS",
"Other"
))))))
cluster
cluster <-
ifelse(grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
ifelse(grepl("CS|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
ifelse(grepl("Bio", ODI$Programme, ignore.case=T), "BIO",
ifelse(grepl("Finance|Duisenberg", ODI$Programme, ignore.case=T), "FIN",
ifelse( grepl("Econometrics|EDS", ODI$Programme, ignore.case=T), "ECO",
ifelse(grepl("BA|Business", ODI$Programme, ignore.case=T), "BIZ",
"Other"
))))))
cluster
Programme_cluster =
ifelse(grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
ifelse(grepl("CS|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
ifelse(grepl("Bio", ODI$Programme, ignore.case=T), "BIO",
ifelse(grepl("Finance|Duisenberg", ODI$Programme, ignore.case=T), "FIN",
ifelse( grepl("Econometrics|EDS", ODI$Programme, ignore.case=T), "ECO",
ifelse(grepl("BA|Business", ODI$Programme, ignore.case=T), "BIZ",
"Other"))))))
ODI %>% mutate(Programme = Programme_cluster)
ODI
ODI <- ODI %>% mutate(Programme = Programme_cluster)
ODI
ODI$Date
ODI$Date %>% as.Date()
ODI$Date %>% mdy()
mdy()
ODI$Date %>% mdy()
ODI$Time
ODI <- ODI %>%
mutate(
Programme = Programme_cluster,
Date = mdy(Date),
Time = hms(Time))
ODI
"
Data preprocessing
Data Mining Techniques
Assignment 1
Task 1 A
"
options(warn=-1)
library(here)
library(tidyverse)
library(lubridate)
library(ggplot2)
colnames(ODI)
dim(ODI)
ODI %>% head()
names = c("DateTime", "Programme", "MLCourse", "IRCourse", "StatCourse", "DBCourse", "Gender", "Chocolate",
"Birthdate", "Neighbours", "Standup", "Stresslevel", "Reward", "RandomNo", "Bedtime", "Goodday1",
"Goodday2")
raw = read_csv(here('data','ODI', 'ODI-2021.csv'), col_names = names) %>% as_tibble() %>% slice(-1)
ODI = raw %>%
separate(DateTime, sep = " ", into = c("Date", "Time")) %>%
mutate(MLCourse = as.integer(MLCourse == "yes"),
IRCourse = na_if(IRCourse, "unknown"), IRCourse = as.integer(IRCourse == "1"),
StatCourse = na_if(StatCourse, "unknown"), StatCourse = as.integer(StatCourse == "mu"),
DBCourse = na_if(DBCourse, "unknown"), DBCourse = as.integer(DBCourse == "ja"),
Gender = recode(Gender, unknown = 0, male = 1, female = -1),
Chocolate = as.numeric(as.factor(Chocolate)), # [1 :"fat" 2 :"I have no idea what you are talking about" 3:"neither" 4 :"slim" 5 :"unknown"]
Neighbours = na_if(as.integer(Neighbours), "NaN"), # Drop non numeric
Stresslevel = as.integer(ifelse(str_detect(Stresslevel, regex('over', ignore_case = T)), NA, Stresslevel)) # Remove non numerical
) %>%
select(-c('Standup')) # Drop standup
ODI[,'Neighbours'][ODI[,'Neighbours'] > 10] = NA # Replace higher than 10 (unreasonable values) by NA
ODI[,'Stresslevel'][ODI[,'Stresslevel'] < 0 | ODI[,'Stresslevel'] > 100] = NA # Remove outside range (0,100)
Programme_cluster =
ifelse(grepl("AI|artificial", ODI$Programme, ignore.case=T), "AI",
ifelse(grepl("CS|Computer|Computational", ODI$Programme, ignore.case=T), "CS",
ifelse(grepl("Bio", ODI$Programme, ignore.case=T), "BIO",
ifelse(grepl("Finance|Duisenberg", ODI$Programme, ignore.case=T), "FIN",
ifelse(grepl("Econometrics|EDS", ODI$Programme, ignore.case=T), "ECO",
ifelse(grepl("BA|Business", ODI$Programme, ignore.case=T), "BIZ",
"Other"))))))
ODI <- ODI %>%
mutate(
Programme = Programme_cluster,
Date = mdy(Date),
Time = hms(Time))
ODI %>% View()
barchart_input = ODI %>% select(3:7)
barchart_input
